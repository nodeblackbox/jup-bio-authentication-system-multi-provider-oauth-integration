generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String   
  email         String?  // Optional, no longer required for Twitter/X
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@index([name]) // Index the 'name' field (Twitter handle) for faster lookups
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?     
  token_type         String? 
  scope              String? 
  user               User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

// model Account {
//   id                String   @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?  // Optional
//   access_token      String?  // Optional
//   expires_at        Int?     // Optional
//   user              User     @relation(fields: [userId], references: [id])

//   @@unique([provider, providerAccountId]) // Ensure accounts are uniquely identified
// }

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql" // Or your database provider
//   url      = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

// model User {
//   id            String   @id @default(cuid())
//   name          String?
//   email         String?  @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
// }

// model Account {
//   id                String   @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?  // Optional
//   access_token      String?  // Optional
//   expires_at        Int?     // Optional
//   user              User     @relation(fields: [userId], references: [id])

//   @@unique([provider, providerAccountId]) // Compound unique constraint
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }
